


ARM Macro Assembler    Page 1 


    1 00000000         ; Sample program makes the 4 LEDs P1.16, P1.17, P1.18, P
                       1.19 go on and off in sequence
    2 00000000         ; (c) Mike Brady, 2020.
    3 00000000         
    4 00000000                 area             tcd,code,readonly
    5 00000000                 export           __main
    6 00000000         __main
    7 00000000         
    8 00000000         ;Zero factorial test - works
    9 00000000 E3A01000        MOV              R1, #0      ;
   10 00000004 E3A00000        MOV              R0, #0      ;
   11 00000008 EB000017        BL               fact
   12 0000000C         
   13 0000000C         ;Rest of the test
   14 0000000C E59F50B4        LDR              R5, =inputs ; input address
   15 00000010 E59F80B4        LDR              R8, =fact_results 
                                                            ; results address
   16 00000014 E3A09000        MOV              R9,#0       ; second index
   17 00000018         
   18 00000018         for1
   19 00000018 E3570010        CMP              R7,#16      ; 4 elements * 4 bi
                                                            ts
   20 0000001C 0A000009        BEQ              endfor1
   21 00000020         
   22 00000020 E3A01000        MOV              R1, #0      ;
   23 00000024 E3A00000        MOV              R0, #0      ;
   24 00000028 E7950007        LDR              R0,[R5,R7]  ; R7 - offset, R5 -
                                                             input address
   25 0000002C         
   26 0000002C EB00000E        BL               fact
   27 00000030         
   28 00000030 E7880009        STR              R0,[R8,R9]  ; R8- results addre
                                                            ss R9 - offset R0 -
                                                             MSB
   29 00000034 E2899004        ADD              R9,R9,#4    ; next space
   30 00000038 E7881009        STR              R1,[R8,R9]  ; R8- results addre
                                                            ss R9 - offset R1 -
                                                             LSB
   31 0000003C E2899004        ADD              R9,R9,#4    ; next space
   32 00000040         
   33 00000040 E2877004        ADD              R7,R7, #4   ; next input elemen
                                                            t offset
   34 00000044 EAFFFFF3        B                for1
   35 00000048         endfor1
   36 00000048         
   37 00000048         
   38 00000048         ; To see if we can load the right values into registers 
                       from memory
   39 00000048 E3A07000        MOV              R7, #0      ;
   40 0000004C         for2
   41 0000004C E3570020        CMP              R7,#32      ;
   42 00000050 0A000004        BEQ              endfor2
   43 00000054         
   44 00000054 E7980007        LDR              R0,[R8,R7]  ;
   45 00000058 E2877004        ADD              R7,R7,#4    ;
   46 0000005C E7981007        LDR              R1,[R8,R7]  ; 
   47 00000060 E2877004        ADD              R7,R7, #4   ;
   48 00000064         
   49 00000064 EAFFFFF8        B                for2



ARM Macro Assembler    Page 2 


   50 00000068         endfor2
   51 00000068         
   52 00000068         
   53 00000068 EAFFFFFE 
                       fin     b                fin
   54 0000006C         
   55 0000006C         ; fact subroutine
   56 0000006C         ;  calculates 64 bit factorial for n, a natural number
   57 0000006C         ; Parameters:
   58 0000006C         ;  R0 - n value 
   59 0000006C         ; Return:
   60 0000006C         ;  R0 - most significant 32 bits of the factorial
   61 0000006C         ;  R1 - least significant 32 bits of the factorial
   62 0000006C         
   63 0000006C         fact
   64 0000006C E92D403C        STMFD            sp!, {LR,R2-R5} ; storing the r
                                                            egisters so we dont
                                                             damage the content
                                                            s of them inside th
                                                            e subroutine
   65 00000070 E3A05000        MOV              R5,#0x00000000 ; We will be usi
                                                            ng R6 to set the  t
                                                            he C bit of the CPS
                                                            R
   66 00000074 E128F005        MSR              CPSR_f,R5   ; setting the C bit
                                                             is in the CPSR
   67 00000078 E1A03000        MOV              R3,R0       ;
   68 0000007C E3530001        CMP              R3,#1       ; recursion until n
                                                             > 1
   69 00000080 CA000002        BGT              fact_n_1    ; 
   70 00000084 E3A01001        MOV              R1,#1       ; return 1 when n<=
                                                            1 
   71 00000088 E3A00000        MOV              R0,#0       ;
   72 0000008C EA00000B        B                fact_return ;
   73 00000090         fact_n_1
   74 00000090 E2400001        SUB              R0,R0,#1    ;
   75 00000094 EBFFFFF4        BL               fact        ; call fact(n-1)
   76 00000098         
   77 00000098 E3A02000        MOV              R2,#0
   78 0000009C         ;MUL R1,R3,R1              ; return n * fact(n-1) 
   79 0000009C E0821193        UMULL            R1,R2,R3,R1 ; R2-R1 = R3 * R1 w
                                                            e multilply two 32 
                                                            bit values, and sto
                                                            re the 64 bit value
                                                             corresponding to t
                                                            he LSB in R2toR1
   80 000000A0 E0840093        UMULL            R0,R4,R3,R0 ; We do the same mu
                                                            ltiplication as abo
                                                            ve but for the most
                                                             significant bits p
                                                            art, we store carry
                                                             for LSBs and MSBs
   81 000000A4 E0820000        ADD              R0,R2,R0    ; Adding the LSB ca
                                                            rry to the MSB
   82 000000A8 E3540000        CMP              R4,#0       ; if the Most signi
                                                            ficant 32 bits of M
                                                            SB product is anyth
                                                            ing other than 0 it
                                                             means we have over



ARM Macro Assembler    Page 3 


                                                            flow
   83 000000AC 0A000003        BEQ              fact_return ; likely an error a
                                                            nd set the C bit in
                                                             CPSR to 1
   84 000000B0 E3A05202        MOV              R5,#0x20000000 ; NVCZ - 0010 - 
                                                            0x200....
   85 000000B4 E128F005        MSR              CPSR_f,R5   ; Setting C bit in 
                                                            CPSR to 1 if we 
   86 000000B8 E3A01000        MOV              R1,#0x00000000 ; I'm considerin
                                                            g my product to be 
                                                            0 as we have encoun
                                                            tered a factorial w
                                                            hich is 
   87 000000BC E3A00000        MOV              R0,#0x00000000 ; over 64 bits, 
                                                            these can be commen
                                                            ted out to see the 
                                                            factorial without t
                                                            he overflow
   88 000000C0         fact_return
   89 000000C0 E8BD803C        LDMFD            sp!, {PC,R2-R5} ; restore the c
                                                            ontents of the used
                                                             registers for the 
                                                            main program
   90 000000C4 E12FFF1E        BX               LR          ; return program ex
                                                            ecution to the call
                                                            er 
   91 000000C8         
   92 000000C8         
   93 000000C8 00000000 
              00000000         area             tcdrodata,data,readonly
   94 00000000 00000005 
                       inputs  dcd              5
   95 00000004 0000000E        dcd              14
   96 00000008 00000014        dcd              20
   97 0000000C 0000001E        dcd              30
   98 00000010         
   99 00000010                 area             tcddata,data,readwrite
  100 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    fact_results
                               space            32
  101 00000020         
  102 00000020                 end
Command Line: --debug --diag_suppress=9931 --apcs=interwork --depend=.\objects\
tcd.d -o.\objects\tcd.o -I"C:\Users\th3j9\Desktop\Microprocessor Systems\ARM\RV
31\INC" -I"C:\Users\th3j9\Desktop\Microprocessor Systems\ARM\CMSIS\Include" -I"
C:\Users\th3j9\Desktop\Microprocessor Systems\ARM\INC\Philips" --predefine="__E
VAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --list=.\listings\tcd.lst 
TCD.s
